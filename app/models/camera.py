# app/models/camera.py

from typing import Optional, List, TYPE_CHECKING
from sqlmodel import Field, Relationship, SQLModel, UniqueConstraint

# The BaseSQLModel should be a simple SQLModel that includes an ID.
from app.models.base import BaseSQLModel

if TYPE_CHECKING:
    from .station import Station
    from .obliqueimage import ObliqueImage
    from .calibration import Calibration
    from .timestack import TimeStack
    from .camerabyfusion import CameraByFusion
    from .commonpoint import CommonPoint

class Camera(BaseSQLModel, table=True):
    """
    Represents a single camera device installed at a monitoring station.

    This model stores the camera's intrinsic properties, such as its resolution
    and its unique reference identifier for a given station. It also links to
    all data products generated by this camera, like images and calibrations.

    Attributes:
        id: The primary key for the camera.
        reference: A user-defined identifier for the camera (e.g., "CAM_01", "FLIR_A65").
                   This must be unique per station.
        sizeX: The horizontal resolution (width) of the camera in pixels.
        sizeY: The vertical resolution (height) of the camera in pixels.
        station_id: The foreign key linking this camera to its parent station.
        station: The parent Station object this camera belongs to.
        oblique_images: A list of oblique images captured by this camera.
        calibrations: A list of calibration records for this camera.
        timestacks: A list of timestack images generated from this camera's data.
        fusions: A list of fusion processes this camera is a part of.
        common_points: A list of common points identified in this camera's images.
    """
    __table_args__ = (
        UniqueConstraint("reference", "station_id", name="unique_reference_per_station"),
    )

    reference: str = Field(index=True, description="A user-defined reference name for the camera, unique per station.")
    sizeX: int = Field(description="The horizontal resolution (width) in pixels.")
    sizeY: int = Field(description="The vertical resolution (height) in pixels.")
    
    station_id: int = Field(
        foreign_key="station.id",
        description="The foreign key of the station this camera belongs to."
    )

    # --- Relationships ---
    station: "Station" = Relationship(back_populates="cameras")
    oblique_images: List["ObliqueImage"] = Relationship(back_populates="camera")
    calibrations: List["Calibration"] = Relationship(back_populates="camera")
    timestacks: List["TimeStack"] = Relationship(back_populates="camera")
    fusions: List["CameraByFusion"] = Relationship(back_populates="camera")
    common_points: List["CommonPoint"] = Relationship(back_populates="camera")

    def __repr__(self) -> str:
        """Provides a developer-friendly string representation of the Camera object."""
        return f"Camera(id={self.id}, reference='{self.reference}', station_id={self.station_id})"
